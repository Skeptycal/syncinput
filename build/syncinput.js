function Vector2(x, y){	this.x = (x !== undefined) ? x : 0;	this.y = (y !== undefined) ? y : 0;}Vector2.prototype.set = function(x, y){	this.x = x;	this.y = y;}function Key(){	this.isPressed = false;	this.justPressed = false;	this.justReleased = false;}//Action ListKey.KEY_DOWN = -1;Key.KEY_UP = 1;Key.KEY_RESET = 0;//Update Key status based new stateKey.prototype.update = function(action){	this.justPressed = false;	this.justReleased = false;	if(action === Key.KEY_DOWN)	{		if(!this.isPressed)		{			this.justPressed = true;		}		this.isPressed = true;	}	else if(action === Key.KEY_UP)	{		if(this.isPressed)		{			this.justReleased = true;		}		this.isPressed = false;	}	else if(action === Key.KEY_RESET)	{		this.justReleased = false;		this.justPressed = false;	}}//Set key statusKey.prototype.set = function(just_pressed, is_pressed, just_released){	this.justPressed = just_pressed;	this.isPressed = is_pressed;	this.justReleased = just_released;}//Reset key to default valuesKey.prototype.reset = function(){	this.justPressed = false;	this.isPressed = false;	this.justReleased = false;}function Gamepad(){	var index = Gamepad.gamepads.length;	this.setGamepad(navigator.getGamepads()[(index !== undefined) ? index : 0]);	Gamepad.gamepads.push(this);}Gamepad.prototype.setGamepad = function(gamepad){		if(gamepad !== undefined)	{		this.index = gamepad.index;		this.buttons = [];		for(var i = 0; i < gamepad.buttons.length; i++)		{			this.buttons.push(new Key());		}	}	else	{		this.index = 0;		this.buttons = [];	}}//Update key flagsGamepad.prototype.update = function(){	var gamepad = navigator.getGamepads()[this.index];	if(gamepad !== undefined)	{		for(var i = 0; i < this.buttons.length; i++)		{			this.buttons[i].update(gamepad.buttons[i].pressed ? Key.KEY_DOWN : Key.KEY_UP);		}	}}//Check if a button is pressedGamepad.prototype.buttonPressed = function(button){	return (button > this.buttons.length) ? false : this.buttons[button].isPressed;}//Check if a button was just pressedGamepad.prototype.buttonJustPressed = function(button){	return (button > this.buttons.length) ? false : this.buttons[button].justPressed;}//Check if a button was just releasedGamepad.prototype.buttonJustReleased = function(button){	return (button > this.buttons.length) ? false : this.buttons[button].justReleased;}//Dispose gamepadGamepad.prototype.dispose = function(){	var index = Gamepad.gamepads.indexOf(this);	if(index !== -1)	{		Gamepad.gamepads.splice(index, 1);	}}//Keep track of every gamepad object to disconnect and reconnect them on the flyGamepad.gamepads = [];//Get all available gamepadsGamepad.getGamepads = function(){	return navigator.getGamepads();}//Create and start gamepad listenerGamepad.startListener = function(){	window.addEventListener("gamepadconnected", function(event)	{		console.log("connected", event);		var gamepad = event.gamepad;		for(var i = 0; i < Gamepad.gamepads.length; i++)		{			if(Gamepad.gamepads[i].index === gamepad.index)			{				Gamepad.gamepads[i].setGamepad(gamepad);			}		}	});	window.addEventListener("gamepaddisconnected", function(event)	{		console.log("disonnected", event);		//TODO <CHECK IF THE GAMEPAD DISCONNECTED IS IN USE>	});}Gamepad.startListener();//Standart button mappingGamepad.LEFT = 14;Gamepad.RIGHT = 15;Gamepad.DOWN = 13Gamepad.UP = 12;Gamepad.SELECT = 8;Gamepad.START = 9;Gamepad.HOME = 16;Gamepad.LEFT_TRIGGER_A = 4;Gamepad.LEFT_TRIGGER_B = 6;Gamepad.RIGHT_TRIGGER_A = 5;Gamepad.RIGHT_TRIGGER_B = 7;Gamepad.A = 0;Gamepad.B = 1;Gamepad.C = 2;Gamepad.D = 3;//Standard axisGamepad.LEFT_ANALOGUE_HOR = 0;Gamepad.LEFT_ANALOGUE_VERT = 1;Gamepad.RIGHT_ANALOGUE_HOR = 2;Gamepad.RIGHT_ANALOGUE_VERT = 3;
function Mouse(){	//Raw data	this._keys = [];	this._position = new Vector2(0, 0);	this._position_updated = false;	this._delta = new Vector2(0, 0);	this._wheel = 0;	this._wheel_updated = false;	//Position, delta, and scroll speed	this.keys = [];	this.position = new Vector2(0,0);	this.delta = new Vector2(0,0);	this.wheel = 0;	//Canvas (use to calculate coordinates relative to it)	this.canvas = null;	//Mouse events	this.events = [];	//Initialize key instances	for(var i = 0; i < 3; i++)	{		this._keys.push(new Key());		this.keys.push(new Key());	}	//Self pointer	var self = this;	//Scroll wheel	if(window.onmousewheel !== undefined)	{		//Chrome, edge		this.events.push([window, "mousewheel", function(event)		{			self._wheel = event.deltaY;			self._wheel_updated = true;		}]);	}	else if(window.addEventListener !== undefined)	{		//Firefox		this.events.push([window, "DOMMouseScroll", function(event)		{			self._wheel = event.detail * 30;			self._wheel_updated = true;		}]);	}	else	{		this.events.push([window, "wheel", function(event)		{			self._wheel = event.deltaY;			self._wheel_updated = true;		}]);	}	//Touchscreen input	if("ontouchstart" in window || navigator.msMaxTouchPoints > 0)	{		//Auxiliar variables to calculate touch delta		var last_touch = new Vector2(0, 0);		//Touch screen pressed event		this.events.push([window, "touchstart", function(event)		{			var touch = event.touches[0];			last_touch.set(touch.clientX, touch.clientY);			self.updateKey(Mouse.LEFT, Key.KEY_DOWN);		}]);		//Touch screen released event		this.events.push([window, "touchend", function(event)		{			self.updateKey(Mouse.LEFT, Key.KEY_UP);		}]);		//Touch screen move event		this.events.push([window, "touchmove", function(event)		{			var touch = event.touches[0];			if(self.canvas !== null)			{				var rect = self.canvas.getBoundingClientRect();				self.updatePosition(touch.clientX - rect.left, touch.clientY - rect.top, touch.clientX - last_touch.x, touch.clientY - last_touch.y);			}			else			{				self.updatePosition(touch.clientX, touch.clientY, touch.clientX - last_touch.x, touch.clientY - last_touch.y);			}			last_touch.set(touch.clientX, touch.clientY);		}]);	}	//Input	else	{		//Move event		this.events.push([window, "mousemove", function(event)		{			if(self.canvas !== null)			{				var rect = self.canvas.getBoundingClientRect();				self.updatePosition(event.clientX - rect.left, event.clientY - rect.top, event.movementX, event.movementY);			}			else			{				self.updatePosition(event.clientX, event.clientY, event.movementX, event.movementY);			}		}]);		//Button pressed event		this.events.push([window, "mousedown", function(event)		{			self.updateKey(event.which - 1, Key.KEY_DOWN);		}]);		//Button released event		this.events.push([window, "mouseup", function(event)		{			self.updateKey(event.which - 1, Key.KEY_UP);		}]);	}	//Initialize events	for(var i = 0; i < this.events.length; i++)	{		var event = this.events[i];		event[0].addEventListener(event[1], event[2]);	}}//Mouse ButtonsMouse.LEFT = 0;Mouse.MIDDLE = 1;Mouse.RIGHT = 2;//Canvas to be used for relative coordinates calculationMouse.prototype.setCanvas = function(canvas){	this.canvas = canvas;	canvas.mouseInside = false;	canvas.addEventListener("mouseenter", function()	{		this.mouseInside = true;	});	canvas.addEventListener("mouseleave", function()	{		this.mouseInside = false;	});}//Check if mouse is inside attached canvasMouse.prototype.insideCanvas = function(){	if(this.canvas === null)	{		return false;	}	return this.canvas.mouseInside;}//Set if mouse lockedMouse.prototype.setLock = function(value){	if(this.canvas !== null)	{		if(value)		{			if(this.canvas.requestPointerLock)			{				this.canvas.requestPointerLock();			}			else if(this.canvas.mozRequestPointerLock)			{				this.canvas.mozRequestPointerLock();			}			else if(this.canvas.webkitRequestPointerLock)			{				this.canvas.webkitRequestPointerLock();			}		}		else		{			if(document.exitPointerLock)			{				document.exitPointerLock();			}			else if(document.mozExitPointerLock)			{				document.mozExitPointerLock();			}			else if(document.webkitExitPointerLock)			{				document.webkitExitPointerLock();			}		}	}}//Check if Mouse button is pressedMouse.prototype.buttonPressed = function(button){	return this.keys[button].isPressed;}//Check if a mouse button was just pressedMouse.prototype.buttonJustPressed = function(button){	return this.keys[button].justPressed;}//Check if a mouse button was just releasedMouse.prototype.buttonJustReleased = function(button){	return this.keys[button].justReleased;}//Update Mouse PositionMouse.prototype.updatePosition = function(x, y, x_diff, y_diff){	this._position.set(x, y);	this._delta.x += x_diff;	this._delta.y += y_diff;	this._position_updated = true;}//Update Mouse KeyMouse.prototype.updateKey = function(button, action){	if(button > -1)	{		this._keys[button].update(action);	}}//Update Mouse State (Calculate position diff)Mouse.prototype.update = function(){	//Update mouse keys state	for(var i = 0; i < this._keys.length; i++)	{		if(this._keys[i].justPressed && this.keys[i].justPressed)		{			this._keys[i].justPressed = false;		}		if(this._keys[i].justReleased && this.keys[i].justReleased)		{			this._keys[i].justReleased = false;		}		this.keys[i].set(this._keys[i].justPressed, this._keys[i].isPressed, this._keys[i].justReleased);	}	//Update mouse wheel	if(this._wheel_updated)	{		this.wheel = this._wheel;		this._wheel_updated = false;	}	else	{		this.wheel = 0;	}	//Update mouse Position if needed	if(this._position_updated)	{		this.delta.x = this._delta.x;		this.delta.y = this._delta.y;		this._delta.set(0,0);		this.position.x = this._position.x;		this.position.y = this._position.y;		this._position_updated = false;	}	else	{		this.delta.x = 0;		this.delta.y = 0;	}}//Dispose mouse objectMouse.prototype.dispose = function(){	for(var i = 0; i < this.events.length; i++)	{		var event = this.events[i];		event[0].removeEventListener(event[1], event[2]);	}}function Keyboard(){	this.keys = [];	this.actions = [];	//Initialize Keys	for(var i = 0; i < 256; i++)	{		this.keys.push(new Key());	}	//Keyboard events	this.events = [];	//Actions pointer	var actions = this.actions;	//Key down	this.events.push([window, "keydown", function(event)	{		actions.push(event.keyCode);		actions.push(Key.KEY_DOWN);	}]);	//Key up	this.events.push([window, "keyup", function(event)	{		actions.push(event.keyCode);		actions.push(Key.KEY_UP);	}]);	//Initialize events	for(var i = 0; i < this.events.length; i++)	{		var event = this.events[i];		event[0].addEventListener(event[1], event[2]);	}}//Update key flags syncronouslyKeyboard.prototype.update = function(){	var end = 0;	while(this.actions.length > end)	{		var key = this.actions.shift();		var action = this.actions.shift();		this.keys[key].update(action);		if(this.keys[key].justReleased || this.keys[key].justPressed)		{			this.actions.push(key);			this.actions.push(Key.KEY_RESET);			end += 2;		}	}}//Reset keyboard statusKeyboard.prototype.reset = function(){	//Clear actions array	this.actions = [];	//Reset all keys	for(var i = 0; i < this.keys.length; i++)	{		this.keys[i].reset();	}}//Check if a key is pressedKeyboard.prototype.keyPressed = function(key){	return this.keys[key].isPressed;}//Check is a key as just pressedKeyboard.prototype.keyJustPressed = function(key){	return this.keys[key].justPressed;}//Check if a key was just releasedKeyboard.prototype.keyJustReleased = function(key){	return this.keys[key].justReleased;}//Dispose keyboard eventsKeyboard.prototype.dispose = function(){	for(var i = 0; i < this.events.length; i++)	{		var event = this.events[i];		event[0].removeEventListener(event[1], event[2]);	}}//Some keyboard key codesKeyboard.TAB = 9;Keyboard.ENTER = 13;Keyboard.SHIFT = 16;Keyboard.CTRL = 17;Keyboard.ALT = 18;Keyboard.CAPS_LOCK = 20;Keyboard.ESC = 27;Keyboard.SPACEBAR = 32;Keyboard.PAGE_UP = 33;Keyboard.PAGE_DOWN = 34;Keyboard.END = 35;Keyboard.HOME = 36;Keyboard.INSERT = 45;Keyboard.DEL = 46;Keyboard.LEFT = 37;Keyboard.RIGHT = 39;Keyboard.UP = 38;Keyboard.DOWN = 40;Keyboard.NUM0 = 48;Keyboard.NUM1 = 49;Keyboard.NUM2 = 50;Keyboard.NUM3 = 51;Keyboard.NUM4 = 52;Keyboard.NUM5 = 53;Keyboard.NUM6 = 54;Keyboard.NUM7 = 55;Keyboard.NUM8 = 56;Keyboard.NUM9 = 57;Keyboard.A = 65;Keyboard.B = 66;Keyboard.C = 67;Keyboard.D = 68;Keyboard.E = 69;Keyboard.F = 70;Keyboard.G = 71;Keyboard.H = 72;Keyboard.I = 73;Keyboard.J = 74;Keyboard.K = 75;Keyboard.L = 76;Keyboard.M = 77;Keyboard.N = 78;Keyboard.O = 79;Keyboard.P = 80;Keyboard.Q = 81;Keyboard.R = 82;Keyboard.S = 83;Keyboard.T = 84;Keyboard.U = 85;Keyboard.V = 86;Keyboard.W = 87;Keyboard.X = 88;Keyboard.Y = 89;Keyboard.Z = 90;Keyboard.F1 = 112;Keyboard.F2 = 113;Keyboard.F3 = 114;Keyboard.F4 = 115;Keyboard.F5 = 116;Keyboard.F6 = 117;Keyboard.F7 = 118;Keyboard.F8 = 119;Keyboard.F9 = 120;Keyboard.F10 = 121;Keyboard.F11 = 122;Keyboard.F12 = 123;function SyncInput(){}SyncInput.VERSION = "SyncInput V1.1";SyncInput.TIMESTAMP = "201611210139";